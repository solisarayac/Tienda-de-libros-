// Importamos el modelo de Book
const Book = require('../models/Book');

/**
 * Obtener todos los libros
 * Soporta filtros opcionales: categoria, estado
 * Paginaci√≥n: page, limit
 */
exports.getAllBooks = async (req, res) => {
    try {
        // Desestructuramos query params
        const { categoria, estado, page = 1, limit = 10 } = req.query;
        let filter = {};
        
        // Agregar filtros si vienen en la query
        if (categoria) filter.categoria = categoria;
        if (estado) filter.estado = estado;

        // Obtener libros con filtros, l√≠mite y paginaci√≥n
        const books = await Book.find(filter)
            .limit(limit * 1) // Convertimos limit a n√∫mero
            .skip((page - 1) * limit) // Saltar elementos seg√∫n p√°gina
            .sort({ createdAt: -1 }); // Ordenar por creaci√≥n descendente

        const total = await Book.countDocuments(filter); // Total de resultados

        // Enviar respuesta
        res.json({
            books,
            totalPages: Math.ceil(total / limit),
            currentPage: page,
            total
        });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

/**
 * Obtener libro por ID
 */
exports.getBookById = async (req, res) => {
    try {
        const book = await Book.findById(req.params.id);
        if (!book) {
            return res.status(404).json({ message: 'Libro no encontrado' });
        }
        res.json(book);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

/**
 * Crear un nuevo libro
 */
exports.createBook = async (req, res) => {
    try {
        console.log('üì¶ Datos recibidos:', req.body);

        // Convertir a√±o y cantidad a n√∫meros, con valores por defecto
        const a√±oNum = req.body.a√±oPublicacion ? parseInt(req.body.a√±oPublicacion) : 2000;
        const cantidadNum = req.body.cantidad ? parseInt(req.body.cantidad) : 1;

        // Validaciones b√°sicas
        if (isNaN(a√±oNum)) {
            return res.status(400).json({ 
                message: 'El a√±o debe ser un n√∫mero v√°lido (o dejar vac√≠o para 2000)'
            });
        }

        if (isNaN(cantidadNum) || cantidadNum < 0) {
            return res.status(400).json({ 
                message: 'La cantidad debe ser un n√∫mero v√°lido (o dejar vac√≠o para 1)'
            });
        }

        // Construir objeto del libro
        const bookData = {
            titulo: req.body.titulo || 'Sin t√≠tulo',
            autor: req.body.autor || 'Autor desconocido',
            isbn: req.body.isbn || '0000000000',
            editorial: req.body.editorial || 'Editorial desconocida',
            a√±oPublicacion: a√±oNum,
            categoria: req.body.categoria || 'General',
            cantidad: cantidadNum
        };

        // Si se subi√≥ imagen, agregar nombre de archivo
        if (req.file) {
            bookData.imagen = req.file.filename;
        }

        // Crear libro en la base de datos
        const book = await Book.create(bookData);
        res.status(201).json(book);

    } catch (error) {
        console.error('‚ùå Error en createBook:', error);

        // Validaciones de mongoose
        if (error.name === 'ValidationError') {
            const errors = Object.values(error.errors).map(e => e.message);
            return res.status(400).json({ 
                message: 'Error de validaci√≥n',
                errors 
            });
        }
        
        // Error por duplicado de ISBN
        if (error.code === 11000) {
            return res.status(400).json({ 
                message: 'El ISBN ya existe en el sistema' 
            });
        }

        // Error gen√©rico
        res.status(500).json({ 
            message: 'Error interno del servidor',
            error: error.message 
        });
    }
};

/**
 * Actualizar un libro existente
 */
exports.updateBook = async (req, res) => {
    try {
        // Validar campos obligatorios
        if (req.body.a√±oPublicacion === '' || req.body.cantidad === '' || 
            req.body.a√±oPublicacion === undefined || req.body.cantidad === undefined ||
            req.body.a√±oPublicacion === null || req.body.cantidad === null) {
            return res.status(400).json({ 
                message: 'El a√±o y la cantidad no pueden estar vac√≠os'
            });
        }

        const a√±oNum = parseInt(req.body.a√±oPublicacion);
        const cantidadNum = parseInt(req.body.cantidad);

        if (isNaN(a√±oNum) || isNaN(cantidadNum)) {
            return res.status(400).json({ 
                message: 'El a√±o y la cantidad deben ser n√∫meros v√°lidos' 
            });
        }

        // Construir objeto con datos actualizados
        const bookData = {
            titulo: req.body.titulo,
            autor: req.body.autor,
            editorial: req.body.editorial,
            a√±oPublicacion: a√±oNum,
            categoria: req.body.categoria,
            cantidad: cantidadNum
        };

        if (req.file) {
            bookData.imagen = req.file.filename;
        }

        // Actualizar libro en la base de datos
        const book = await Book.findByIdAndUpdate(
            req.params.id,
            bookData,
            { new: true, runValidators: true }
        );

        if (!book) {
            return res.status(404).json({ message: 'Libro no encontrado' });
        }

        res.json(book);
    } catch (error) {
        if (error.name === 'ValidationError') {
            const errors = Object.values(error.errors).map(e => e.message);
            return res.status(400).json({ 
                message: 'Error de validaci√≥n',
                errors 
            });
        }
        res.status(500).json({ message: error.message });
    }
};

/**
 * Eliminar un libro por ID
 */
exports.deleteBook = async (req, res) => {
    try {
        const book = await Book.findByIdAndDelete(req.params.id);
        if (!book) {
            return res.status(404).json({ message: 'Libro no encontrado' });
        }
        res.json({ message: 'Libro eliminado correctamente' });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};
